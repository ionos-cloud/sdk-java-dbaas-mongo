/*
 * IONOS DBaaS MongoDB REST API
 * With IONOS Cloud Database as a Service, you have the ability to quickly set up and manage a MongoDB database. You can also delete clusters, manage backups and users via the API.   MongoDB is an open source, cross-platform, document-oriented database program. Classified as a NoSQL database program, it uses JSON-like documents with optional schemas.  The MongoDB API allows you to create additional database clusters or modify existing ones. Both tools, the Data Center Designer (DCD) and the API use the same concepts consistently and are well suited for smooth and intuitive use. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.dbaasmongo.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;

/**
 * The URLs to navigate the different pages. As of now we always only return a single page. 
 */
@ApiModel(description = "The URLs to navigate the different pages. As of now we always only return a single page. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-21T07:42:31.609Z[Etc/UTC]")

public class PaginationLinks {
  
  public static final String SERIALIZED_NAME_PREV = "prev";
  @SerializedName(SERIALIZED_NAME_PREV)
  private URI prev;


  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private URI self;


  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private URI next;

  

   /**
   * The URL (with offset and limit parameters) of the previous page; only present if the offset is greater than 0. 
   * @return prev
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<PREVIOUS-PAGE-URI>", value = "The URL (with offset and limit parameters) of the previous page; only present if the offset is greater than 0. ")

  public URI getPrev() {
    return prev;
  }


  public void setPrev(URI prev) {
    this.prev = prev;
  }



   /**
   * The URL (with offset and limit parameters) of the current page. 
   * @return self
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<THIS-PAGE-URI>", value = "The URL (with offset and limit parameters) of the current page. ")

  public URI getSelf() {
    return self;
  }


  public void setSelf(URI self) {
    this.self = self;
  }



   /**
   * The URL (with offset and limit parameters) of the next page; only present if the offset and limit is less than the total number of elements. 
   * @return next
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<NEXT-PAGE-URI>", value = "The URL (with offset and limit parameters) of the next page; only present if the offset and limit is less than the total number of elements. ")

  public URI getNext() {
    return next;
  }


  public void setNext(URI next) {
    this.next = next;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaginationLinks paginationLinks = (PaginationLinks) o;
    return Objects.equals(this.prev, paginationLinks.prev) && Objects.equals(this.self, paginationLinks.self) && Objects.equals(this.next, paginationLinks.next);
  }




  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaginationLinks {\n");
    
    sb.append("    prev: ").append(toIndentedString(prev)).append("\n");

    sb.append("    self: ").append(toIndentedString(self)).append("\n");

    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

