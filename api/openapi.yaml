openapi: 3.0.3
info:
  description: "With IONOS Cloud Database as a Service, you have the ability to quickly\
    \ set up and manage a MongoDB database. You can also delete clusters, manage backups\
    \ and users via the API. \n\nMongoDB is an open source, cross-platform, document-oriented\
    \ database program. Classified as a NoSQL database program, it uses JSON-like\
    \ documents with optional schemas.\n\nThe MongoDB API allows you to create additional\
    \ database clusters or modify existing ones. Both tools, the Data Center Designer\
    \ (DCD) and the API use the same concepts consistently and are well suited for\
    \ smooth and intuitive use.\n"
  title: IONOS DBaaS MongoDB REST API
  version: 1.0.0
servers:
- description: Production
  url: https://api.ionos.com/databases/mongodb
security:
- basicAuth: []
- tokenAuth: []
tags:
- description: A cluster in this context describes a grouping of multiple MongoDB
    instances into a replica set. **Note** that we do not yet support sharded clusters.
  name: Clusters
- description: Metadata about the API, such as versions.
  name: Metadata
paths:
  /clusters:
    get:
      description: Retrieves a list of MongoDB clusters.
      operationId: clustersGet
      parameters:
      - description: |
          Response filter to list only the MongoDB clusters that contain
          the specified name. The value is case insensitive and matched on the
          'displayName' field.
        explode: true
        in: query
        name: filter.name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterList'
          description: Successful operation.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Get Clusters
      tags:
      - Clusters
      x-accepts: application/json
    post:
      description: |
        Creates a new MongoDB cluster.
      operationId: clustersPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClusterRequest'
        description: The cluster to be created.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
          description: |
            The created cluster is returned and is automatically set to `state = BUSY`.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Create a Cluster
      tags:
      - Clusters
      x-contentType: application/json
      x-accepts: application/json
  /clusters/{clusterId}:
    delete:
      description: Deletes a MongoDB cluster.
      operationId: clustersDelete
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
          description: |
            The cluster to be deleted is automatically set to `state = DESTROYING`.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Delete a Cluster
      tags:
      - Clusters
      x-accepts: application/json
    get:
      description: Get a cluster by id.
      operationId: clustersFindById
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
          description: Successful operation.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Get a cluster by id
      tags:
      - Clusters
      x-accepts: application/json
    patch:
      description: Patch attributes of a MongoDB cluster.
      operationId: clustersPatch
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchClusterRequest'
        description: Part of the cluster which should be modified.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
          description: Successful operation.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Patch a cluster
      tags:
      - Clusters
      x-contentType: application/json
      x-accepts: application/json
  /clusters/{clusterId}/users:
    get:
      description: Retrieves a list of MongoDB users.
      operationId: clustersUsersGet
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersList'
          description: Successful operation.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Get all Cluster Users
      tags:
      - Users
      x-accepts: application/json
    post:
      description: |
        Creates a MongoDB user.
      operationId: clustersUsersPost
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: The user to be created.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: |
            The created user is returned with metadata indicating when the user was created and by whom.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Create MongoDB User
      tags:
      - Users
      x-contentType: application/json
      x-accepts: application/json
  /clusters/{clusterId}/users/{username}:
    delete:
      description: Deletes a MongoDB user specified by its ID.
      operationId: clustersUsersDelete
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      - description: The authentication username.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: |
            The user identified by the username and database parameters will be deleted from the cluster.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Delete a MongoDB User by ID
      tags:
      - Users
      x-accepts: application/json
    get:
      description: Retrieves the MongoDB user identified by the username.
      operationId: clustersUsersFindById
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      - description: The authentication username.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: |
            The user identified by the username and database parameters is returned.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Get a MongoDB User by ID
      tags:
      - Users
      x-accepts: application/json
    patch:
      description: Patches a MongoDB user specified by its ID.
      operationId: clustersUsersPatch
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      - description: The authentication username.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequest'
        description: Part of the MongoDB user which should be modified.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: |
            The user identified by the username and database parameters will be patched.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Patch a MongoDB User by ID
      tags:
      - Users
      x-contentType: application/json
      x-accepts: application/json
  /clusters/{clusterId}/logs:
    get:
      description: Retrieves MongoDB logs based on the given parameters.
      operationId: clustersLogsGet
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      - description: The start time for the query in RFC3339 format. Must not be more
          than 30 days ago but before the end parameter. The default is 30 days ago.
        explode: true
        in: query
        name: start
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end time for the query in RFC3339 format. Must not be greater
          than now. The default is the current timestamp.
        explode: true
        in: query
        name: end
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The direction in which to scan through the logs. The logs are
          returned in order of the direction.
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: BACKWARD
          enum:
          - BACKWARD
          - FORWARD
          type: string
        style: form
      - description: The maximal number of log lines to return.  If the limit is reached
          then log lines will be cut at the end (respecting the scan direction).
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 5000
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterLogs'
          description: Successful operation.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Get logs of your cluster
      tags:
      - Logs
      x-accepts: application/json
  /clusters/{clusterId}/snapshots:
    get:
      description: Retrieves MongoDB snapshots.
      operationId: clustersSnapshotsGet
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotList'
          description: Successful operation.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Get the snapshots of your cluster
      tags:
      - Snapshots
      x-accepts: application/json
  /clusters/{clusterId}/restore:
    post:
      description: Triggers an in-place restore of the given MongoDB cluster.
      operationId: clustersRestorePost
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRestoreRequest'
        description: The restore request to create.
        required: true
      responses:
        "202":
          description: Successful operation.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: In-place restore of a cluster
      tags:
      - Restores
      x-contentType: application/json
      x-accepts: application/json
  /templates:
    get:
      description: |
        Retrieves a list of valid templates. These templates can be used to create MongoDB clusters; they contain properties, such as number of cores, RAM, and the storage size.
      operationId: templatesGet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateList'
          description: Successful operation.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Get Templates
      tags:
      - Templates
      x-accepts: application/json
  /infos/version:
    get:
      description: Retrieves the current version of the responding API.
      operationId: infosVersionGet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIVersion'
          description: Successful operation.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Get API Version
      tags:
      - Metadata
      x-accepts: application/json
  /infos/versions:
    get:
      description: Retrieves all available versions of the responding API.
      operationId: infosVersionsGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/APIVersion'
                type: array
          description: Successful operation.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type),
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: The content type of the response.
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Get All API Versions
      tags:
      - Metadata
      x-accepts: application/json
components:
  parameters:
    ClusterNameQuery:
      description: |
        Response filter to list only the MongoDB clusters that contain
        the specified name. The value is case insensitive and matched on the
        'displayName' field.
      explode: true
      in: query
      name: filter.name
      required: false
      schema:
        type: string
      style: form
    ClusterIdPath:
      description: The unique ID of the cluster.
      explode: false
      in: path
      name: clusterId
      required: true
      schema:
        type: string
      style: simple
    UsernamePath:
      description: The authentication username.
      explode: false
      in: path
      name: username
      required: true
      schema:
        type: string
      style: simple
  responses:
    ApiError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: |
        Any erroneous status code: 400 (parse error), 401 (auth error),
        402 (trial access), 403 (insufficient permissions), 404 (not found),
        405 (unsupported HTTP method), 415 (unsupported content type),
        422 (validation error), 429 (request rate limit exceeded),
        500 (server error), 503 (maintenance)
      headers:
        Content-Type:
          description: The content type of the response.
          explode: false
          schema:
            default: application/problem+json
            type: string
          style: simple
  schemas:
    ErrorResponse:
      properties:
        httpStatus:
          description: The HTTP status code of the operation.
          example: 400
          type: integer
        messages:
          items:
            $ref: '#/components/schemas/ErrorMessage'
          type: array
      type: object
    ErrorMessage:
      properties:
        errorCode:
          description: |
            Application internal error code.
          example: dbaas-err-api-123
          type: string
        message:
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Error message example
          type: string
      type: object
    APIVersion:
      example:
        name: v2.1
        swaggerUrl: https://api.ionos.com/databases/mongodb/infos/assets/swagger-v2.1.yml
      properties:
        name:
          example: v2.1
          type: string
        swaggerUrl:
          example: https://api.ionos.com/databases/mongodb/infos/assets/swagger-v2.1.yml
          type: string
      type: object
    UsersList:
      description: List of cluster users.
      example:
        id: 498ae72f-411f-11eb-9d07-046c59cc737e
        items:
        - metadata:
            createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
            createdDate: 2020-12-10T13:37:50+01:00
            createdBy: john.doe@example.com
            state: CREATING
          properties:
            password: password
            roles:
            - database: database
              role: read
            - database: database
              role: read
            username: username
        - metadata:
            createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
            createdDate: 2020-12-10T13:37:50+01:00
            createdBy: john.doe@example.com
            state: CREATING
          properties:
            password: password
            roles:
            - database: database
              role: read
            - database: database
              role: read
            username: username
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          description: The unique ID of the resource.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        items:
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    UserProperties:
      description: Mongodb user properties.
      example:
        password: password
        roles:
        - database: database
          role: read
        - database: database
          role: read
        username: username
      properties:
        username:
          type: string
        password:
          minLength: 10
          type: string
          writeOnly: true
        roles:
          items:
            $ref: '#/components/schemas/UserRoles'
          type: array
      required:
      - password
      - username
    User:
      description: MongoDB database user.
      example:
        metadata:
          createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          createdDate: 2020-12-10T13:37:50+01:00
          createdBy: john.doe@example.com
          state: CREATING
        properties:
          password: password
          roles:
          - database: database
            role: read
          - database: database
            role: read
          username: username
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        metadata:
          $ref: '#/components/schemas/UserMetadata'
        properties:
          $ref: '#/components/schemas/UserProperties'
      type: object
    PatchUserRequest:
      description: MongoDB database user patch request.
      example:
        metadata:
          createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          createdDate: 2020-12-10T13:37:50+01:00
          createdBy: john.doe@example.com
          state: CREATING
        properties:
          password: password
          roles:
          - database: database
            role: read
          - database: database
            role: read
      properties:
        metadata:
          $ref: '#/components/schemas/UserMetadata'
        properties:
          $ref: '#/components/schemas/PatchUserProperties'
    PatchUserProperties:
      description: MongoDB database user patch request properties.
      example:
        password: password
        roles:
        - database: database
          role: read
        - database: database
          role: read
      properties:
        password:
          minLength: 10
          type: string
          writeOnly: true
        roles:
          items:
            $ref: '#/components/schemas/UserRoles'
          type: array
    UserRoles:
      description: a list of mongodb user role.
      example:
        database: database
        role: read
      properties:
        role:
          enum:
          - read
          - readWrite
          - dbAdmin
          - clusterMonitor
          - readAnyDatabase
          - readWriteAnyDatabase
          - dbAdminAnyDatabase
          example: read
          type: string
        database:
          type: string
      type: object
    SnapshotList:
      allOf:
      - $ref: '#/components/schemas/SnapshotList_allOf'
      - $ref: '#/components/schemas/Pagination'
      description: List of snapshots.
      type: object
    SnapshotResponse:
      description: A database snapshot.
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          description: The unique ID of the resource.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        properties:
          $ref: '#/components/schemas/SnapshotProperties'
      type: object
    SnapshotProperties:
      description: Properties of a snapshot.
      properties:
        version:
          description: The MongoDB version this backup was created from.
          example: "5.0"
          type: string
        size:
          description: The size of the snapshot in Mebibytes.
          example: 150
          type: integer
        creationTime:
          description: The date the resource was created.
          example: 2020-12-10T13:37:50+01:00
          format: date-time
          type: string
      type: object
    CreateRestoreRequest:
      description: The restore request.
      example:
        snapshotId: dcd31531-3ac8-11eb-9feb-046c59cc737e
      properties:
        snapshotId:
          description: The unique ID of the snapshot you want to restore.
          example: dcd31531-3ac8-11eb-9feb-046c59cc737e
          type: string
      required:
      - snapshotId
      type: object
    ClusterList:
      allOf:
      - $ref: '#/components/schemas/ClusterList_allOf'
      - $ref: '#/components/schemas/Pagination'
      description: List of clusters.
      type: object
    ClusterResponse:
      description: A database cluster.
      example:
        metadata:
          createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          createdDate: 2020-12-10T13:37:50+01:00
          createdBy: john.doe@example.com
          lastModifiedDate: 2020-12-11T13:37:50+01:00
          lastModifiedBy: jane.doe@example.com
          health: HEALTHY
          state: AVAILABLE
          lastModifiedByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
        id: 498ae72f-411f-11eb-9d07-046c59cc737e
        properties:
          maintenanceWindow:
            dayOfTheWeek: Monday
            time: 16:30:59
          connectionString: mongo+srv://m-498ae72f-411f-11eb-9d07-046c59cc737e.mongodb.de-txl.ionos.com
          instances: 3
          displayName: MongoDB cluster
          location: de/txl
          templateID: 498ae72f-411f-11eb-9d07-046c59cc737e
          mongoDBVersion: "5.0"
          connections:
          - cidrList:
            - 192.168.1.100/24
            - 192.168.1.101/24
            datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
            lanId: "2"
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          description: The unique ID of the resource.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        properties:
          $ref: '#/components/schemas/ClusterProperties'
      type: object
    ResourceType:
      description: The resource type.
      enum:
      - collection
      - cluster
      - user
      - snapshot
      type: string
    ResourceId:
      description: The unique ID of the resource.
      example: 498ae72f-411f-11eb-9d07-046c59cc737e
      type: string
    ClusterProperties:
      description: Properties of a database cluster.
      example:
        maintenanceWindow:
          dayOfTheWeek: Monday
          time: 16:30:59
        connectionString: mongo+srv://m-498ae72f-411f-11eb-9d07-046c59cc737e.mongodb.de-txl.ionos.com
        instances: 3
        displayName: MongoDB cluster
        location: de/txl
        templateID: 498ae72f-411f-11eb-9d07-046c59cc737e
        mongoDBVersion: "5.0"
        connections:
        - cidrList:
          - 192.168.1.100/24
          - 192.168.1.101/24
          datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
          lanId: "2"
      properties:
        displayName:
          description: The name of your cluster.
          example: MongoDB cluster
          type: string
        mongoDBVersion:
          description: The MongoDB version of your cluster.
          example: "5.0"
          type: string
          x-extensible-enum:
          - "5.0"
          - "6.0"
        location:
          description: |
            The physical location where the cluster will be created. This is the location where all your instances will be located. This property is immutable.
          example: de/txl
          type: string
          x-extensible-enum:
          - de/fra
          - de/txl
          - gb/lhr
          - es/vit
          - us/ewr
          - fr/par
        instances:
          description: |
            The total number of instances in the cluster (one primary and n-1 secondaries).
          example: 3
          type: integer
          x-extensible-enum:
          - 1
          - 3
        connections:
          items:
            $ref: '#/components/schemas/Connection'
          maxItems: 1
          minItems: 1
          type: array
        maintenanceWindow:
          $ref: '#/components/schemas/MaintenanceWindow'
        templateID:
          description: |
            The unique ID of the template, which specifies the number of cores, storage size, and memory.
            You cannot downgrade to a smaller template or minor edition (e.g. from business to playground).
            To get a list of all templates to confirm the changes use the /templates endpoint.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        connectionString:
          description: The connection string for your cluster.
          example: mongo+srv://m-498ae72f-411f-11eb-9d07-046c59cc737e.mongodb.de-txl.ionos.com
          type: string
      type: object
    Pagination:
      properties:
        offset:
          description: |
            The offset specified in the request (if none was specified, the default
            offset is 0) (not implemented yet).
          example: 0
          minimum: 0
          readOnly: true
          type: integer
        limit:
          description: |
            The limit specified in the request (if none was specified, use the
            endpoint's default pagination limit) (not implemented yet, always return
            number of items).
          example: 42
          minimum: 0
          readOnly: true
          type: integer
        _links:
          $ref: '#/components/schemas/PaginationLinks'
      type: object
    PaginationOffset:
      description: |
        The offset specified in the request (if none was specified, the default
        offset is 0) (not implemented yet).
      example: 0
      minimum: 0
      readOnly: true
      type: integer
    PaginationLimit:
      description: |
        The limit specified in the request (if none was specified, use the
        endpoint's default pagination limit) (not implemented yet, always return
        number of items).
      example: 42
      minimum: 0
      readOnly: true
      type: integer
    PaginationLinks:
      description: |
        The URLs to navigate the different pages. As of now we always only return a
        single page.
      properties:
        prev:
          description: |
            The URL (with offset and limit parameters) of the previous page; only
            present if the offset is greater than 0.
          example: <PREVIOUS-PAGE-URI>
          format: uri
          readOnly: true
          type: string
        self:
          description: |
            The URL (with offset and limit parameters) of the current page.
          example: <THIS-PAGE-URI>
          format: uri
          readOnly: true
          type: string
        next:
          description: |
            The URL (with offset and limit parameters) of the next page; only
            present if the offset and limit is less than the total number of elements.
          example: <NEXT-PAGE-URI>
          format: uri
          readOnly: true
          type: string
      type: object
    CreateClusterRequest:
      description: |
        The request payload with all data needed to create a new MongoDB cluster.
      example:
        metadata:
          createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          createdDate: 2020-12-10T13:37:50+01:00
          createdBy: john.doe@example.com
          lastModifiedDate: 2020-12-11T13:37:50+01:00
          lastModifiedBy: jane.doe@example.com
          health: HEALTHY
          state: AVAILABLE
          lastModifiedByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
        properties:
          maintenanceWindow:
            dayOfTheWeek: Monday
            time: 16:30:59
          instances: 3
          displayName: MongoDB cluster
          location: de/txl
          templateID: 498ae72f-411f-11eb-9d07-046c59cc737e
          mongoDBVersion: "5.0"
          connections:
          - cidrList:
            - 192.168.1.100/24
            - 192.168.1.101/24
            datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
            lanId: "2"
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        properties:
          $ref: '#/components/schemas/CreateClusterProperties'
      type: object
    UserMetadata:
      description: The metadata of the resource.
      example:
        createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
        createdDate: 2020-12-10T13:37:50+01:00
        createdBy: john.doe@example.com
        state: CREATING
      properties:
        createdDate:
          description: The date the resource was created.
          example: 2020-12-10T13:37:50+01:00
          format: date-time
          type: string
        createdBy:
          description: The user who created the resource.
          example: john.doe@example.com
          type: string
        createdByUserId:
          description: The ID of the user who created the resource.
          example: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          type: string
        state:
          description: The user state.
          enum:
          - AVAILABLE
          - CREATING
          - DESTROYING
          example: CREATING
          type: string
    Metadata:
      description: The metadata of the resource.
      example:
        createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
        createdDate: 2020-12-10T13:37:50+01:00
        createdBy: john.doe@example.com
        lastModifiedDate: 2020-12-11T13:37:50+01:00
        lastModifiedBy: jane.doe@example.com
        health: HEALTHY
        state: AVAILABLE
        lastModifiedByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
      properties:
        createdDate:
          description: The date the resource was created.
          example: 2020-12-10T13:37:50+01:00
          format: date-time
          type: string
        createdBy:
          description: The user who created the resource.
          example: john.doe@example.com
          type: string
        createdByUserId:
          description: The ID of the user who created the resource.
          example: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          type: string
        lastModifiedDate:
          description: The date the resource was last modified.
          example: 2020-12-11T13:37:50+01:00
          format: date-time
          type: string
        lastModifiedBy:
          description: The last user who modified the resource.
          example: jane.doe@example.com
          type: string
        lastModifiedByUserId:
          description: The ID of the user who last modified the resource.
          example: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          type: string
        state:
          $ref: '#/components/schemas/State'
        health:
          $ref: '#/components/schemas/Health'
    State:
      description: |
        The current status reported by the cluster.
        * **AVAILABLE** Resources for this cluster exist and are healthy.
        * **BUSY** Resources for this cluster are being created or updated.
        * **DESTROYING** Delete cluster command was issued, the cluster is being deleted.
        * **FAILED** Failed to get the cluster status.
        * **UNKNOWN** The state is unknown.
      enum:
      - AVAILABLE
      - BUSY
      - DESTROYING
      - FAILED
      - UNKNOWN
      example: AVAILABLE
      type: string
    Health:
      description: |
        The current health status reported by the cluster.
        * **HEALTHY** Primary exists and number of replicas is equal to specified.
        * **UNHEALTHY** Primary does not exist or cluster doesn't have majority.
        * **DEGRADED** Primary exists and number of replicas is less than specified.
        * **UNKNOWN** The health status is unknown.
      enum:
      - HEALTHY
      - UNHEALTHY
      - DEGRADED
      - UNKNOWN
      example: HEALTHY
      type: string
    CreateClusterProperties:
      description: |
        The properties with all data needed to create a new MongoDB cluster.
      example:
        maintenanceWindow:
          dayOfTheWeek: Monday
          time: 16:30:59
        instances: 3
        displayName: MongoDB cluster
        location: de/txl
        templateID: 498ae72f-411f-11eb-9d07-046c59cc737e
        mongoDBVersion: "5.0"
        connections:
        - cidrList:
          - 192.168.1.100/24
          - 192.168.1.101/24
          datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
          lanId: "2"
      properties:
        templateID:
          description: |
            The unique ID of the template, which specifies the number of cores, storage size, and memory.
            You cannot downgrade to a smaller template or minor edition (e.g. from business to playground).
            To get a list of all templates to confirm the changes use the /templates endpoint.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        mongoDBVersion:
          description: The MongoDB version of your cluster.
          example: "5.0"
          type: string
          x-extensible-enum:
          - "5.0"
          - "6.0"
        instances:
          description: |
            The total number of instances in the cluster (one primary and n-1 secondaries).
          example: 3
          type: integer
          x-extensible-enum:
          - 1
          - 3
        connections:
          items:
            $ref: '#/components/schemas/Connection'
          maxItems: 1
          minItems: 1
          type: array
        location:
          description: |
            The physical location where the cluster will be created. This is the location where all your instances will be located. This property is immutable.
          example: de/txl
          type: string
          x-extensible-enum:
          - de/fra
          - de/txl
          - gb/lhr
          - es/vit
          - us/ewr
          - fr/par
        displayName:
          description: The name of your cluster.
          example: MongoDB cluster
          type: string
        maintenanceWindow:
          $ref: '#/components/schemas/MaintenanceWindow'
      required:
      - connections
      - displayName
      - instances
      - location
      - mongodbVersion
      - templateID
      type: object
    PatchClusterRequest:
      description: Request payload to change a cluster.
      example:
        metadata:
          createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          createdDate: 2020-12-10T13:37:50+01:00
          createdBy: john.doe@example.com
          lastModifiedDate: 2020-12-11T13:37:50+01:00
          lastModifiedBy: jane.doe@example.com
          health: HEALTHY
          state: AVAILABLE
          lastModifiedByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
        properties:
          maintenanceWindow:
            dayOfTheWeek: Monday
            time: 16:30:59
          instances: 3
          displayName: MongoDB cluster
          templateID: 498ae72f-411f-11eb-9d07-046c59cc737e
          connections:
          - cidrList:
            - 192.168.1.100/24
            - 192.168.1.101/24
            datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
            lanId: "2"
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        properties:
          $ref: '#/components/schemas/PatchClusterProperties'
      type: object
    PatchClusterProperties:
      description: Properties of the payload to change a cluster.
      example:
        maintenanceWindow:
          dayOfTheWeek: Monday
          time: 16:30:59
        instances: 3
        displayName: MongoDB cluster
        templateID: 498ae72f-411f-11eb-9d07-046c59cc737e
        connections:
        - cidrList:
          - 192.168.1.100/24
          - 192.168.1.101/24
          datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
          lanId: "2"
      properties:
        displayName:
          description: The name of your cluster.
          example: MongoDB cluster
          type: string
        maintenanceWindow:
          $ref: '#/components/schemas/MaintenanceWindow'
        instances:
          description: |
            The total number of instances in the cluster (one primary and n-1 secondaries).
          example: 3
          type: integer
          x-extensible-enum:
          - 1
          - 3
        connections:
          items:
            $ref: '#/components/schemas/Connection'
          maxItems: 1
          minItems: 0
          type: array
        templateID:
          description: |
            The unique ID of the template, which specifies the number of cores, storage size, and memory.
            You cannot downgrade to a smaller template or minor edition (e.g. from business to playground).
            To get a list of all templates to confirm the changes use the /templates endpoint.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
      type: object
    TemplateID:
      description: |
        The unique ID of the template, which specifies the number of cores, storage size, and memory.
        You cannot downgrade to a smaller template or minor edition (e.g. from business to playground).
        To get a list of all templates to confirm the changes use the /templates endpoint.
      example: 498ae72f-411f-11eb-9d07-046c59cc737e
      type: string
    ClusterLogs:
      description: The logs of the MongoDB cluster.
      example:
        instances:
        - name: mongodb-cluster-0
          messages:
          - time: 2021-09-06T10:00:38.253+02:00
            message: Hello World
          - time: 2021-09-06T10:00:38.253+02:00
            message: Hello World
        - name: mongodb-cluster-0
          messages:
          - time: 2021-09-06T10:00:38.253+02:00
            message: Hello World
          - time: 2021-09-06T10:00:38.253+02:00
            message: Hello World
      properties:
        instances:
          items:
            $ref: '#/components/schemas/ClusterLogs_instances'
          type: array
      type: object
    MongoDBVersion:
      description: The MongoDB version of your cluster.
      example: "5.0"
      type: string
      x-extensible-enum:
      - "5.0"
      - "6.0"
    ConnectionString:
      description: The connection string for your cluster.
      example: mongo+srv://m-498ae72f-411f-11eb-9d07-046c59cc737e.mongodb.de-txl.ionos.com
      type: string
    Instances:
      description: |
        The total number of instances in the cluster (one primary and n-1 secondaries).
      example: 3
      type: integer
      x-extensible-enum:
      - 1
      - 3
    Location:
      description: |
        The physical location where the cluster will be created. This is the location where all your instances will be located. This property is immutable.
      example: de/txl
      type: string
      x-extensible-enum:
      - de/fra
      - de/txl
      - gb/lhr
      - es/vit
      - us/ewr
      - fr/par
    Connection:
      description: The network connection  details for your cluster.
      example:
        cidrList:
        - 192.168.1.100/24
        - 192.168.1.101/24
        datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
        lanId: "2"
      properties:
        datacenterId:
          description: The datacenter to which your cluster will be connected.
          example: 5a029f4a-72e5-11ec-90d6-0242ac120003
          type: string
        lanId:
          description: The numeric LAN ID with which you connect your cluster.
          example: "2"
          type: string
        cidrList:
          description: |
            The list of IPs for your cluster.
            All IPs must be in a /24 network.
            Note the following unavailable IP ranges:
            10.233.114.0/24
          example:
          - 192.168.1.100/24
          - 192.168.1.101/24
          items:
            type: string
          type: array
      required:
      - cidrList
      - datacenterId
      - lanId
      type: object
    DisplayName:
      description: The name of your cluster.
      example: MongoDB cluster
      type: string
    MaintenanceWindow:
      description: |
        A weekly window of 4 hours during which maintenance work can be performed.
      example:
        dayOfTheWeek: Monday
        time: 16:30:59
      properties:
        time:
          example: 16:30:59
          type: string
        dayOfTheWeek:
          $ref: '#/components/schemas/DayOfTheWeek'
      required:
      - dayOfTheWeek
      - time
      type: object
    DayOfTheWeek:
      description: The week day.
      enum:
      - Sunday
      - Monday
      - Tuesday
      - Wednesday
      - Thursday
      - Friday
      - Saturday
      example: Monday
      type: string
    TemplateList:
      allOf:
      - $ref: '#/components/schemas/TemplateList_allOf'
      - $ref: '#/components/schemas/Pagination'
      description: The list of MongoDB templates.
      type: object
    TemplateResponse:
      description: A MongoDB template item.
      properties:
        id:
          description: The unique template ID.
          example: 15c6dd2f-02d2-4987-b439-9a58dd59ecc3
          type: string
        name:
          description: The name of the template.
          example: MongoDB Community 4XL
          type: string
        edition:
          description: The edition of the template (e.g. enterprise)
          example: enterprise
          type: string
        cores:
          description: The number of CPU cores.
          example: 1
          type: integer
        ram:
          description: The amount of memory in GB.
          example: 4
          type: integer
        storageSize:
          description: The amount of storage size in GB.
          example: 30
          type: integer
    SnapshotList_allOf:
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          description: The unique ID of the resource.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        items:
          items:
            $ref: '#/components/schemas/SnapshotResponse'
          type: array
      type: object
    ClusterList_allOf:
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          description: The unique ID of the resource.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        items:
          items:
            $ref: '#/components/schemas/ClusterResponse'
          type: array
      type: object
    ClusterLogs_messages:
      example:
        time: 2021-09-06T10:00:38.253+02:00
        message: Hello World
      properties:
        time:
          example: 2021-09-06T10:00:38.253+02:00
          format: date-time
          type: string
        message:
          example: Hello World
          type: string
      type: object
    ClusterLogs_instances:
      example:
        name: mongodb-cluster-0
        messages:
        - time: 2021-09-06T10:00:38.253+02:00
          message: Hello World
        - time: 2021-09-06T10:00:38.253+02:00
          message: Hello World
      properties:
        name:
          description: The name of the MongoDB instance.
          example: mongodb-cluster-0
          type: string
        messages:
          items:
            $ref: '#/components/schemas/ClusterLogs_messages'
          type: array
      type: object
    TemplateList_allOf:
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          description: The unique ID of the resource.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        items:
          items:
            $ref: '#/components/schemas/TemplateResponse'
          type: array
      type: object
  securitySchemes:
    basicAuth:
      description: |
        For 'Basic' authentication, take your credentials by first combining the username and password with a colon (``username:password``) and then encoding the resulting string in base64 (``YWxhZGRpbjpvcGVuc2VzYW1l``).

        **Example Request Header**

        ``Authorization: Basic YWxhZGRpbjpvcGVuc2Vzl``

        More details: https://en.wikipedia.org/wiki/Basic_access_authentication
      scheme: basic
      type: http
    tokenAuth:
      description: |
        Authorization is granted when a valid proof of identity is provided along with an API request for data. This proof of identity is in the form of a JSON web access token, a unique string that identifies a user.

        **Example Request Header**

        ``Authorization: Bearer ACCESS_TOKEN``
      in: header
      name: Authorization
      type: apiKey

